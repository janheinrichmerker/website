{{- $username := site.Data.social.github -}}
{{- with site.Params.gitHubToken -}}
    {{- $username = print $username ":" . -}}
{{- end -}}
{{- if not $username -}}
    {{ errorf "Input must be a GitHub username: %s" .Position }}
{{- end -}}

{{/* Get SPDX IDs for OSI-approved licenses. */}}
{{- $osiApprovedLicenses := slice -}}
{{- with try (resources.GetRemote "https://github.com/spdx/license-list-data/raw/main/json/licenses.json") -}}
    {{- with .Err -}}{{- errorf "%s" . -}}
    {{- else with .Value -}}
        {{- with .Content | unmarshal -}}
            {{- range (where .licenses "isOsiApproved" true) -}}
                {{- $osiApprovedLicenses = append .licenseId $osiApprovedLicenses -}}
            {{- end -}}
        {{- else -}}
            {{- errorf "Unable to parse SPDX license list response." -}}
        {{- end -}}
    {{- else -}}
        {{- errorf "Unable to get SPDX license list response." -}}
    {{- end -}}
{{- end -}}

{{- $githubHeaders := dict -}}
{{- if in $username ":" -}}
    {{- $githubAuthorization := print "Basic " (base64Encode $username) -}}
    {{- $githubHeaders = merge $githubHeaders (dict "Authorization" $githubAuthorization) -}}
    {{- $username = index (split $username ":") 0 -}}
{{- end -}}

{{/* For debugging, use https://docs.github.com/en/graphql/overview/explorer. */}}
{{- $userQuery := printf `
query {
    user(login: "%s") {
        url
        login
        repositories(
            orderBy: {
                field: STARGAZERS,
                direction: DESC,
            },
            first: 0,
            isLocked: false,
            affiliations: [
                OWNER,
                COLLABORATOR,
                ORGANIZATION_MEMBER,
            ],
            privacy: PUBLIC,
        ) {
            totalCount
        }
        followers {
            totalCount
        }
        organizations {
            totalCount
        }
        contributionsCollection {
            contributionYears
        }
    }
}
` $username -}}
{{- $userBody := dict "query" $userQuery | jsonify (dict "noHTMLEscape" true) -}}
{{- $userOpts := dict "method" "post" "body" $userBody "headers" $githubHeaders -}}
{{- $repositoriesCount := 0 -}}
{{- $followersCount := 0 -}}
{{- $organizationsCount := 0 -}}
{{- $contributionYears := slice -}}
{{- with try (resources.GetRemote "https://api.github.com/graphql" $userOpts) -}}
    {{- with .Err -}}{{- errorf "%s" . -}}
    {{- else with .Value -}}
        {{- with .Content | unmarshal -}}
            {{/* Count repos. */}}
            {{- $repositoriesCount = .data.user.repositories.totalCount -}}
            {{/* Count followers. */}}
            {{- $followersCount = .data.user.followers.totalCount -}}
            {{/* Count organizations. */}}
            {{- $organizationsCount = .data.user.organizations.totalCount -}}
            {{/* Years in which contibutions were made. */}}
            {{- $contributionYears = .data.user.contributionsCollection.contributionYears -}}
        {{- else -}}
            {{- errorf "Unable to parse GitHub GraphQL API response." -}}
        {{- end -}}
    {{- else -}}
        {{- errorf "Unable to get GitHub GraphQL API response." -}}
    {{- end -}}
{{- end -}}

{{- $repositories := slice -}}
{{- $step := 100 -}}
{{- $continuation := "null" -}}
{{- range $start := seq 0 $step $repositoriesCount -}}
    {{/* For debugging, use https://docs.github.com/en/graphql/overview/explorer. */}}
    {{- $reposQuery := printf `
    query {
        user(login: "%s") {
            repositories(
                orderBy: {
                    field: STARGAZERS,
                    direction: DESC,
                },
                first: %d,
                after: %s,
                isLocked: false,
                affiliations: [
                    OWNER,
                    COLLABORATOR,
                    ORGANIZATION_MEMBER,
                ],
                privacy: PUBLIC,
            ) {
                totalCount
                pageInfo {
                    endCursor
                }
                nodes {
                    forkCount
                    stargazerCount
                    diskUsage
                    licenseInfo {
                        spdxId
                    }
                }
            }
        }
    }
    ` $username $step $continuation -}}
    {{- $reposBody := dict "query" $reposQuery | jsonify (dict "noHTMLEscape" true) -}}
    {{- $reposOpts := dict "method" "post" "body" $reposBody "headers" $githubHeaders -}}
    {{- $reposCount := 0 -}}
    {{- with try (resources.GetRemote "https://api.github.com/graphql" $reposOpts) -}}
        {{- with .Err -}}{{- errorf "%s" . -}}
        {{- else with .Value -}}
            {{- with .Content | unmarshal -}}
                {{- with .data.user.repositories.nodes -}}
                    {{- $repositories = append $repositories . -}}
                {{- end -}}
                {{- with .data.user.repositories.pageInfo.endCursor -}}
                    {{- $continuation = printf `"%s"` . -}}
                {{- else -}}
                    {{- break -}}
                {{- end -}}
            {{- else -}}
                {{- errorf "Unable to parse GitHub GraphQL API response." -}}
            {{- end -}}
        {{- else -}}
            {{- errorf "Unable to get GitHub GraphQL API response." -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{- $totalCommitContributions := 0 -}}
{{- $totalIssueContributions := 0 -}}
{{- $totalPullRequestContributions := 0 -}}
{{- range $fromYear := $contributionYears -}}
    {{/* For debugging, use https://docs.github.com/en/graphql/overview/explorer. */}}
    {{- $contributionsQuery := printf `
    query {
        user(login: "%s") {
            contributionsCollection(
                from: "%.0f-01-01T00:00:00Z",
            ) {
                totalCommitContributions
                totalIssueContributions
                totalPullRequestContributions
            }
        }
    }
    ` $username $fromYear -}}
    {{- $contributionsBody := dict "query" $contributionsQuery | jsonify (dict "noHTMLEscape" true) -}}
    {{- $contributionsOpts := dict "method" "post" "body" $contributionsBody "headers" $githubHeaders -}}
    {{- with try (resources.GetRemote "https://api.github.com/graphql" $contributionsOpts) -}}
        {{- with .Err -}}{{- errorf "%s" . -}}
        {{- else with .Value -}}
            {{- with .Content | unmarshal -}}
                {{- with .data.user.contributionsCollection -}}
                    {{- $totalCommitContributions = add $totalCommitContributions .totalCommitContributions -}}
                    {{- $totalIssueContributions = add $totalIssueContributions .totalIssueContributions -}}
                    {{- $totalPullRequestContributions = add $totalPullRequestContributions .totalPullRequestContributions -}}
                {{- end -}}
            {{- else -}}
                {{- errorf "Unable to parse GitHub GraphQL API response." -}}
            {{- end -}}
        {{- else -}}
            {{- errorf "Unable to get GitHub GraphQL API response." -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{/* Count repositories. */}}
{{- $repos := 0 -}}
{{/* Count open source repositories. */}}
{{- $openSourceRepos := 0 -}}
{{/* Count kilobytes. */}}
{{- $kilobytes := 0 -}}
{{/* Count stargazers. */}}
{{- $stars := 0 -}}
{{/* Count forks of repositories. */}}
{{- $forks := 0 -}}
{{- range $repositories -}}
    {{- $repos = add $repos 1 -}}
    {{- with .licenseInfo -}}
        {{- if in $osiApprovedLicenses .spdxId -}}
            {{- $openSourceRepos = add $openSourceRepos 1 -}}
        {{- end -}}
    {{- end -}}
    {{- $kilobytes = add $kilobytes .diskUsage -}}
    {{- $stars = add $stars .stargazerCount -}}
    {{- $forks = add $forks .forkCount -}}
{{- end -}}

{{/* Convert kilobytes to megabytes. */}}
{{- $megabytes := div $kilobytes 1000 -}}
{{/* Convert megabytes to gigabytes. */}}
{{- $gigabytes := div $megabytes 1000 -}}

{{/*  Display resulting stats. */}}
<table>
    <tr>
        <td>üìö&ensp;{{ i18n "githubRepos" }}</td>
        <td style="text-align: right;">{{ $repos | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üìñ&ensp;<span
                    title='{{ i18n "githubOsiApprovedReposDescription" }}'>{{ i18n "githubOsiApprovedRepos" }}</span>
        </td>
        <td style="text-align: right;">{{ $openSourceRepos | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>‚≠ê&ensp;{{ i18n "githubStars" }}</td>
        <td style="text-align: right;">{{ $stars | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üîÄ&ensp;{{ i18n "githubForks" }}</td>
        <td style="text-align: right;">{{ $forks | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üëÅÔ∏è&ensp;{{ i18n "githubFollowers" }}</td>
        <td style="text-align: right;">{{ $followersCount | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üíæ&ensp;{{ i18n "githubSize" }}</td>
        <td style="text-align: right;">{{ $gigabytes | lang.FormatNumber 1 }}&thinsp;GB</td>
    </tr>
    <tr>
        <td>‚úèÔ∏è&ensp;{{ i18n "githubCommits" }}</td>
        <td style="text-align: right;">{{ $totalCommitContributions | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üí¨&ensp;{{ i18n "githubIssues" }}</td>
        <td style="text-align: right;">{{ $totalIssueContributions | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üöÄ&ensp;{{ i18n "githubPullRequests" }}</td>
        <td style="text-align: right;">{{ $totalPullRequestContributions | lang.FormatNumber 0 }}</td>
    </tr>
    <tr>
        <td>üè¢&ensp;{{ i18n "githubOrganizations" }}</td>
        <td style="text-align: right;">{{ $organizationsCount | lang.FormatNumber 0 }}</td>
    </tr>
</table>
